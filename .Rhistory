data <- read.xlsx("C:/Users/redch/Desktop/test.xlsx", sheetName = "test data")
library(readxl)
test <- read_excel("C:/Users/redch/Desktop/test.xlsx")
View(test)
str(test)
summary(test)
cor_matrix <- cor(test[, c("水迷宫测试1", "水迷宫测试2", "自我报告方向感量表", "Corsi记忆广度量表", "MRT心理旋转能力", "救灾机器人碰撞次数", "任务成功时间", "路径规划")], use = "complete.obs")
print(cor_matrix)
library(readxl)
test <- read_excel("C:/Users/redch/Desktop/test.xlsx")
View(test)
getwd()
setwd("D:/programming/R/ergonomic")
# 加载必要的库
library(readxl)
library(ggplot2)
library(dplyr)
# 读取Excel文件
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
# 查看数据结构
str(data)
data_clean <- na.omit(data)
summary(data)
cor_matrix <- cor(data_clean %>% select_if(is.numeric))
print(cor_matrix)
View(cor_matrix)
View(cor_matrix)
data <- na.omit(data)
summary(data)
cor_matrix <- cor(data_clean %>% select_if(is.numeric))
colSums(is.na(data))
data <- na.omit(data)
View(data)
View(data)
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
str(data)
colSums(is.na(data))
data <- na.omit(data)
summary(data)
cor_matrix <- cor(data_clean %>% select_if(is.numeric))
print(cor_matrix)
str(data)
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
str(data)
colSums(is.na(data))
data <- na.omit(data)
colSums(is.na(data))
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
str(data)
colSums(is.na(data))
summary(data)
cor_matrix <- cor(data_clean %>% select_if(is.numeric))
print(cor_matrix)
cor_matrix <- cor(data %>% select_if(is.numeric))
print(cor_matrix)
View(cor_matrix)
View(cor_matrix)
cor_data <- as.data.frame(as.table(cor_matrix))
ggplot(cor_data, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
str(data)
data <- data %>% select(-学号)
colSums(is.na(data))
summary(data)
cor_matrix <- cor(data %>% select_if(is.numeric))
print(cor_matrix)
cor_data <- as.data.frame(as.table(cor_matrix))
View(cor_matrix)
View(cor_matrix)
ggplot(cor_data, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "#87CEFA", high = "#FFB6C1", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
# 回归分析: 任务完成时间与各指标的关系
model_time <- lm(任务完成时间 ~ 记忆力 + 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data_clean)
summary(model_time)
# 回归分析: 任务完成时间与各指标的关系
model_time <- lm(任务完成时间 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data_clean)
View(data)
getwd()
setwd("D:/programming/R/ergonomic")
library(readxl)
library(ggplot2)
library(dplyr)
data <- read_excel("C:/Users/redch/Desktop/test.xlsx")
str(data)
data <- data %>% select(-学号)
colSums(is.na(data)) # 检查缺失值
# 转换所有相关列为数值型
numeric_columns <- c("记忆力", "水迷宫测试1", "水迷宫测试2", "Corsi记忆广度量表", "MRT心理旋转能力", "任务完成时间", "机器人碰撞次数")
data[numeric_columns] <- lapply(data[numeric_columns], as.numeric)
# 转换所有相关列为数值型
numeric_columns <- c("水迷宫测试1", "水迷宫测试2", "Corsi记忆广度量表", "MRT心理旋转能力", "任务完成时间", "机器人碰撞次数")
data[numeric_columns] <- lapply(data[numeric_columns], as.numeric)
summary(data)
View(data)
cor_matrix <- cor(data %>% select_if(is.numeric))
print(cor_matrix)
cor_data <- as.data.frame(as.table(cor_matrix))
ggplot(cor_data, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "#87CEFA", high = "#FFB6C1", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
# 回归分析: 任务完成时间与各指标的关系
model_time <- lm(任务完成时间 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data_clean)
# 回归分析: 任务完成时间与各指标的关系
model_time <- lm(任务完成时间 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data)
summary(model_time)
# 回归分析: 碰撞次数与各指标的关系
model_collisions <- lm(碰撞次数 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data_clean)
# 回归分析: 碰撞次数与各指标的关系
model_collisions <- lm(碰撞次数 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data)
# 回归分析: 碰撞次数与各指标的关系
model_collisions <- lm(机器人碰撞次数 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data)
summary(model_collisions)
# 任务完成时间的回归结果可视化
ggplot(data_clean, aes(x = MRT心理旋转能力, y = 任务完成时间)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "任务完成时间与MRT心理旋转能力的关系", x = "MRT心理旋转能力", y = "任务完成时间")
# 任务完成时间的回归结果可视化
ggplot(data, aes(x = MRT心理旋转能力, y = 任务完成时间)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "任务完成时间与MRT心理旋转能力的关系", x = "MRT心理旋转能力", y = "任务完成时间")
# 机器人碰撞次数的回归结果可视化
ggplot(data, aes(x = MRT心理旋转能力, y = 机器人碰撞次数)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "机器人碰撞次数与MRT心理旋转能力的关系", x = "MRT心理旋转能力", y = "机器人碰撞次数")
View(model_collisions)
View(model_collisions)
summary(model_collisions)
# 交互效应
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表, data = data_clean)
# 交互效应
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表, data = data)
summary(model_collisions_interaction)
# 回归分析: 碰撞次数与各指标的关系
model_collisions <- lm(机器人碰撞次数 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data)
summary(model_collisions)
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data_clean)
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
# 交互效应
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表, data = data)
summary(model_collisions_interaction)
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
summary(model_collisions_interaction)
# 交互效应
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试2 * Corsi记忆广度量表, data = data)
summary(model_collisions_interaction)
# 回归分析: 任务完成时间与各指标的关系
model_time_interaction <- lm(任务完成时间 ~ 水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
summary(model_time_interaction)
View(model_time_interaction)
library(broom) # 用于将模型输出转化为数据框
model_time_interaction <- tidy(model_time_interaction)
View(model_time_interaction)
View(model_time_interaction)
model_time_interaction <- tidy(model_time_interaction)
colnames(model_time_interaction)[colnames(model_time_interaction) == "statistic"] <- "t-value"
# 回归分析: 任务完成时间与各指标的关系
model_time_interaction <- lm(任务完成时间 ~ 水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
summary(model_time_interaction)
library(broom) # 用于将模型输出转化为数据框
model_time_interaction <- tidy(model_time_interaction)
colnames(model_time_interaction)[colnames(model_time_interaction) == "statistic"] <- "t-value"
print(model_summary)
print(model_print(model_summary))
print(model_time_interaction)
View(model_time_interaction)
# 回归分析: 碰撞次数与各指标的关系
# model_collisions <- lm(机器人碰撞次数 ~ 水迷宫测试1 + 水迷宫测试2 + MRT心理旋转能力 + Corsi记忆广度量表, data = data)
# summary(model_collisions)
model_collisions_interaction <- lm(机器人碰撞次数 ~ 水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
summary(model_collisions_interaction)
library(broom) # 用于将模型输出转化为数据框
model_collisions_interaction <- tidy(model_time_interaction)
model_collisions_interaction <- tidy(model_collisions_interaction)
colnames(model_collisions_interaction)[colnames(model_collisions_interaction) == "statistic"] <- "t.value"
View(model_collisions_interaction)
# 回归分析: 任务完成时间与各指标的关系
model_time_interaction <- lm(任务完成时间 ~ 水迷宫测试1 * 水迷宫测试2 + 水迷宫测试1 * MRT心理旋转能力 + 水迷宫测试1 * Corsi记忆广度量表 +
水迷宫测试2 * Corsi记忆广度量表 +
水迷宫测试2 * MRT心理旋转能力 + MRT心理旋转能力 * Corsi记忆广度量表, data = data)
summary(model_time_interaction)
library(broom) # 用于将模型输出转化为数据框
model_time_interaction <- tidy(model_time_interaction)
colnames(model_time_interaction)[colnames(model_time_interaction) == "statistic"] <- "t.value"
View(model_time_interaction)
View(model_time_interaction)
# 可视化相关性矩阵
cor_data <- as.data.frame(as.table(cor_matrix))
ggplot(cor_data, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient2(low = "#87CEFA", high = "#FFB6C1", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
